# Common configurations

imageCredentials:
  password: ""

domain: ""
license: ""
superusers: ""
mongo:
  url: ""
redis:
  url: ""
stage: "enterprise"
ssl:
  generator: ""

# Kubernetes Ingress configuration
ingress:
  class: ""
  annotations: {}

# Persistent Volume Storage
storage:
  # * class: ""           - Supports dynamic provisioning when you have a
  #                         default storage class
  # * class: "class-name" - Supports dynamic provisioning when you have a
  #                         specific storage class available
  # * class: "null"       - Supports static provisioning. You should
  #                         configure your own statically-provisioned PVC
  #                         resource with name "cobrowse-sockets-pvc"
  #                       - Also supports pre-configured PVC. You can
  #                         set the sockets.storage.persistentVolumeClaimName
  #                         and recording.storage.persistentVolumeClaimName
  #                         values to reference your own pre-configured PVC(s)
  class: ""
  size: "50Gi"

# API configurations
api:
  replicas: 1
  cpu: ""
  memory: ""
  debug: ""

  service:
    type: ""


# Frontend configurations
frontend:
  replicas: 1
  cpu: ""
  memory: ""

  service:
    type: ""


# Proxy configurations
proxy:
  replicas: 1
  cpu: ""
  memory: ""
  debug: ""

  service:
    type: ""


# Recording configurations
recording:
  replicas: 1
  cpu: ""
  memory: ""
  debug: ""

  service:
    type: ""

  storage: {
    # persistentVolumeClaimName: "cobrowse-sockets-pvc"
  }

# Chromium configurations
chromium:
  cpu: ""
  memory: ""


# Sockets configurations
sockets:
  replicas: 1
  cpu: ""
  memory: ""
  debug: ""

  service:
    type: ""

  storage: {
    # persistentVolumeClaimName: "cobrowse-sockets-pvc"
  }
